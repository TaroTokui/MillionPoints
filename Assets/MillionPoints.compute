#pragma kernel MainCS

// スレッドグループのスレッドサイズ
#define ThreadBlockSize 256

struct ParticleData
{
	float3 BasePosition;
	float3 Position;
	float3 Velocity;
	float3 Albedo;
	float2 Index;
};

RWStructuredBuffer<ParticleData> _CubeDataBuffer;

// 経過時間
float _Time;

// 位相差
float _Phi;

// 波長
float _Lambda;

// 振幅
float _Amplitude;

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float GetRandomNumber(float2 vec, int Seed)
{
	return frac(sin(dot(vec.xy, float2(12.9898, 78.233)) + Seed) * 43758.5453);
}

[numthreads(ThreadBlockSize, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
	// get index
	const unsigned int index = id.x;

	//float3 pos = _CubeDataBuffer[index].BasePosition;
	//float3 vel = _CubeDataBuffer[index].Velocity;

	//float y = _Amplitude * (1 + sin(pos.x / _Lambda + _Phi * _Time));
	//y += _Amplitude * (1 + sin(pos.z / _Lambda + _Phi * _Time));

	//float hue = (y + _Amplitude * 2) / (4 * _Amplitude);
	float hue = GetRandomNumber(id.xy, id.x);

	////_CubeDataBuffer[index].Velocity = float3(0, 0, 0);
	//_CubeDataBuffer[index].Position = pos + float3(0, y, 0);
	_CubeDataBuffer[index].Albedo = float3(hsv2rgb(float3(hue, 1, 1)));

	_CubeDataBuffer[index].Position = _CubeDataBuffer[index].BasePosition;
}
